{
  "js": [
    "function add(a, b) {\nreturn a + b;\n}",
    "const isEven = num => num % 2 === 0;",
    "let count = 0;\nwhile (count < 5) {\nconsole.log(count);\ncount++;\n}",
    "const items = ['apple', 'banana', 'cherry'];\nitems.forEach(item => console.log(item));",
    "class Animal {\nconstructor(name) {\nthis.name = name;\n}\nspeak() {\nconsole.log(this.name + ' makes a noise.');\n}\n}",
    "function delay(ms) {\nreturn new Promise(resolve => setTimeout(resolve, ms));\n}",
    "const fetchData = async () => {\ntry {\nconst res = await fetch('https://api.example.com');\nconst data = await res.json();\nconsole.log(data);\n} catch (err) {\nconsole.error(err);\n}\n}",
    "let map = new Map();\nmap.set('a', 1);\nmap.set('b', 2);\nconsole.log(map.get('a'));",
    "for (let i = 0; i < 10; i++) {\nif (i % 2 === 0) continue;\nconsole.log(i);\n}",
    "const nums = [1, 2, 3, 4, 5];\nconst squares = nums.map(n => n * n);",
    "function throttle(fn, delay) {\nlet last = 0;\nreturn (...args) => {\nconst now = Date.now();\nif (now - last >= delay) {\nlast = now;\nfn(...args);\n}\n};\n}",
    "const debounce = (fn, delay) => {\nlet timeout;\nreturn (...args) => {\nclearTimeout(timeout);\ntimeout = setTimeout(() => fn(...args), delay);\n};\n};",
    "const reverseString = str => str.split('').reverse().join('');",
    "function factorial(n) {\nif (n === 0) return 1;\nreturn n * factorial(n - 1);\n}",
    "try {\nconst user = JSON.parse('{}');\nconsole.log(user.name);\n} catch (e) {\nconsole.error('Invalid JSON');\n}",
    "async function* generator() {\nyield await Promise.resolve(1);\nyield await Promise.resolve(2);\n}",
    "const obj = { a: 1, b: 2 };\nconst clone = { ...obj };",
    "function isPalindrome(str) {\nconst cleaned = str.replace(/[^a-zA-Z]/g, '').toLowerCase();\nreturn cleaned === cleaned.split('').reverse().join('');\n}",
    "setTimeout(() => console.log('Hi after 1 second'), 1000);",
    "const urlParams = new URLSearchParams(window.location.search);\nconst user = urlParams.get('user');",
    "const unique = arr => [...new Set(arr)];",
    "function curry(fn) {\nreturn function curried(...args) {\nif (args.length >= fn.length) {\nreturn fn(...args);\n} else {\nreturn (...next) => curried(...args, ...next);\n}\n};\n}",
    "function deepClone(obj) {\nreturn JSON.parse(JSON.stringify(obj));\n}",
    "const flatten = arr => arr.reduce((a, b) => a.concat(Array.isArray(b) ? flatten(b) : b), []);",
    "// TODO: Add authentication middleware\nconst express = require('express');\nconst app = express();\napp.listen(3000);",
    "const socket = new WebSocket('wss://example.com');\nsocket.onmessage = msg => console.log(msg.data);",
    "window.addEventListener('load', () => {\nconsole.log('Page loaded');\n});",
    "const sum = (...args) => args.reduce((a, b) => a + b, 0);",
    "const capitalize = str => str.charAt(0).toUpperCase() + str.slice(1);",
    "const memoize = fn => {\nconst cache = {};\nreturn (...args) => {\nconst key = args.toString();\nif (cache[key]) return cache[key];\nconst result = fn(...args);\ncache[key] = result;\nreturn result;\n};\n};",
    "const randomHex = () => '#' + Math.floor(Math.random()*0xFFFFFF).toString(16).padStart(6, '0');",
    "const sleep = ms => new Promise(resolve => setTimeout(resolve, ms));"
  ]
}
